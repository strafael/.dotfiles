#!/bin/bash
PACKAGE_LIST=https://raw.githubusercontent.com/strafael/.dotfiles/master/.scripts/package-list.csv
DOTFILES_INSTALL_SCRIPT=https://raw.githubusercontent.com/strafael/.dotfiles/master/.scripts/dotfiles-install

# ---------
# FUNCTIONS
# ---------

function error {
	clear
	printf "ERROR: %s\\n" "$1"
	exit
}

function show_welcome_msg {
	dialog \
		--title "Bem-vindo!" \
		--msgbox "Bem-vindo ao Auto Instalator Script do Rafael!\\n\\nEste script vai instalar e configurar seu desktop Arch Linux com i3wm." \
		9 60 || { clear; exit; }
}


function get_username {
	options=$(cat /etc/passwd | grep '/home' | cut -d: -f1)
	username=$(
		dialog \
			--stdout \
			--no-items \
			--menu "Selecione o usuário:" \
			10 30 4 \
			$options
	)
}


function show_pre_install_msg {
	dialog \
		--title "Aviso" \
		--yes-label "Vomitão!" \
		--no-label "Não, obrigado" \
		--yesno "Este script vai executar a instalação de forma totalmente automatizada.\\n\\nVai levar algum tempo, então senta e relaxa.\\n\\nPressione <Vomitão!> para iniciar a instalação." \
		11 60 || { clear; exit; }
}


function install_from_package_list {
	tmpfile=$(mktemp)
	trap "rm -f $tmpfile" EXIT
	curl -sSL $PACKAGE_LIST | sed '/^#/d' > $tmpfile
	total=$(wc -l < $tmpfile)
	while IFS=, read -r package description; do
		n=$((n+1))
		description="${description%\"}"  # Remove o prefixo "
		description="${description#\"}"  # Remove o sufixo "
		install $package $description
	done < $tmpfile
}


function install {
	dialog \
		--title "Instalação" \
		--infobox "Instalando software $n de $total: $package...\\n\\n\\n$description" \
		8 70
	sudo -u "$username" yay -S --noconfirm "$1" >/dev/null 2>&1
}


function configure_docker {
	systemctl start docker
 	systemctl enable docker
 	usermod -aG docker $username
}


function install_spacemacs {
	dialog \
		--title "Instalação" \
		--infobox "Instalando Spacemacs..." \
		7 70
	git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d >/dev/null 2>&1
}


function install_dotfiles {
	dialog \
		--title "Instalação" \
		--infobox "Colocando arquivos de configuração no lugar..." \
		7 70
	curl -sSL $DOTFILES_INSTALL_SCRIPT | sudo -u "$username" /bin/bash >/dev/null 2>&1
}


function install_vim_plugins {
	dialog \
		--title "Instalação" \
		--infobox "Instalando vim plugins..." \
		7 70
	# Instala VimPlug no Neovim
	curl -fLo $HOME/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	# Para funcionar em modo non interactive, adicione "silent!" antes dos
	# comandos que causam erros quando os plugins ainda não estão
	# os plugins não existem instalados
	sudo -u "$username" /usr/bin/nvim +'PlugInstall --sync' +qa >/dev/null 2>&1
	sudo -u "$username" /usr/bin/vim +'PlugInstall --sync' +qa >/dev/null 2>&1
}


function show_done_msg {
	dialog \
		--title "Tudo pronto!" \
		--msgbox "Pronto! Supondo que não deu nenhum erro que foi omitido por estas janelas, o script foi executado com sucesso, todos os softwares foram instalados, e os arquivos de configuração devem estar em seus lugares.\\n\\nUm backup dos arquivos de configuração pré-existentes que seriam sobrescritos foi criado em ~/.dotfiles-backup.\\n\\nReinice o computador para aplicar as configurações." \
		13 80
}

# ----------------
# INÍCIO DO SCRIPT
# ----------------

# Atualiza o sistema e ao mesmo tempo garante que está rodando como root
pacman -Syu --noconfirm --needed dialog || error "Este script deve ser executado como root"

# show_welcome_msg || error "Abortado."
get_username || error "Abortado."

show_pre_install_msg || error "Abortado."

# Adiciona o usuário ao grupo wheel
usermod -aG wheel $username

# Instala base-devel e git, necessários para instalar o resto dos pacotes
dialog --title "Instalação" --infobox "Instalando \`base-devel\` e \`git\`..." 5 70
pacman --noconfirm --needed -S base-devel git >/dev/null 2>&1

# Caso o pacman tenha criado um .pacnew...
[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers  

# Permite ao usuário executar comandos sudo sem pedir senha
sed -i 's/^#\s\(%wheel\sALL=(ALL)\s\NOPASSWD:\sALL\)/\1/' /etc/sudoers

# Ativa cores no pacman e yay
sed -i 's/^#Color/Color/g' /etc/pacman.conf

# Desliga os beeps
echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf

# Instala yay como AUR helper
pacman --noconfirm --needed -S yay >/dev/null 2>&1

install_from_package_list || error "Abortado (1)"
configure_docker || error "Abortado (2)"
install_spacemacs || error "Abortado (3)"
install_dotfiles || error "Abortado (4)"
# install_vim_plugins || error "Abortado (5)"
show_done_msg || error "Abortado (6)"
clear
